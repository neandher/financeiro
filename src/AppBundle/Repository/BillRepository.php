<?php

namespace AppBundle\Repository;

use AppBundle\Helper\PaginationHelper;
use Pagerfanta\Adapter\DoctrineORMAdapter;
use Pagerfanta\Pagerfanta;

/**
 * BillRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BillRepository extends AbstractEntityRepository
{
    protected function queryLatest(PaginationHelper $paginationHelper)
    {
        $routeParams = $paginationHelper->getRouteParams();

        $qb = $this->createQueryBuilder('bill')
            ->innerJoin('bill.billStatus', 'billStatus')
            ->addSelect('billStatus')
            ->leftJoin('bill.bank', 'bank')
            ->addSelect('bank')
            ->leftJoin('bill.billInstallments', 'billInstallments')
            ->addSelect('billInstallments');

        if (isset($routeParams['search'])) {
            $qb->andWhere('bill.description LIKE :search')->setParameter('search', '%' . $routeParams['search'] . '%');
        }

        if ((isset($routeParams['date_start']) && !empty($routeParams['date_start'])) && (isset($routeParams['date_end']) && !empty($routeParams['date_end']))) {

            $date_start = \DateTime::createFromFormat('d-m-Y', $routeParams['date_start'])->format('Y-m-d');
            $date_end = \DateTime::createFromFormat('d-m-Y', $routeParams['date_end'])->format('Y-m-d');

            $qb->andWhere('billInstallments.dueDateAt >= :date_start')->setParameter('date_start', $date_start);
            $qb->andWhere('billInstallments.dueDateAt <= :date_end')->setParameter('date_end', $date_end);
        }

        if (!isset($routeParams['sorting'])) {
            $qb->orderBy('bill.id', 'desc');
        } else {
            $qb = $this->addOrderingQueryBuilder($qb, $paginationHelper);
        }
        return $qb->getQuery();
    }

    public function findLatest(PaginationHelper $paginationHelper)
    {
        $routeParams = $paginationHelper->getRouteParams();

        $paginator = new Pagerfanta(new DoctrineORMAdapter($this->queryLatest($paginationHelper), false));

        $paginator->setMaxPerPage($routeParams['num_items']);
        $paginator->setCurrentPage($routeParams['page']);

        return $paginator;
    }
}
